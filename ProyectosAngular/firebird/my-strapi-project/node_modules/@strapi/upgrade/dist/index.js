'use strict';

var logger = require('./chunks/logger-DGi224NW.js');
require('semver');
require('node:path');
require('node:assert');
require('chalk');
require('@strapi/utils');
require('fs-extra');
require('fast-glob');
require('jscodeshift/src/Runner');
require('lodash/fp');
require('esbuild-register/dist/node');
require('simple-git');
require('cli-table3');

var index$g = /*#__PURE__*/Object.freeze({
  __proto__: null,
  constants: logger.constants,
  timerFactory: logger.timerFactory
});

var index$f = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemodList: logger.codemodList,
  codemodUID: logger.codemodUID,
  durationMs: logger.durationMs,
  highlight: logger.highlight,
  path: logger.path,
  projectDetails: logger.projectDetails,
  projectType: logger.projectType,
  reports: logger.reports,
  transform: logger.transform,
  upgradeStep: logger.upgradeStep,
  version: logger.version,
  versionRange: logger.versionRange
});

var index$e = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Version: logger.types,
  isLiteralSemVer: logger.isLiteralSemVer,
  isRangeInstance: logger.isRangeInstance,
  isSemVerReleaseType: logger.isSemVerReleaseType,
  isSemverInstance: logger.isSemverInstance,
  isValidSemVer: logger.isValidSemVer,
  isValidStringifiedRange: logger.isValidStringifiedRange,
  rangeFactory: logger.rangeFactory,
  rangeFromReleaseType: logger.rangeFromReleaseType,
  rangeFromVersions: logger.rangeFromVersions,
  semVerFactory: logger.semVerFactory
});

var index$d = /*#__PURE__*/Object.freeze({
  __proto__: null,
  fileScannerFactory: logger.fileScannerFactory
});

var index$c = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codeRunnerFactory: logger.codeRunnerFactory
});

var index$b = /*#__PURE__*/Object.freeze({
  __proto__: null,
  jsonRunnerFactory: logger.jsonRunnerFactory
});

var index$a = /*#__PURE__*/Object.freeze({
  __proto__: null,
  assertAppProject: logger.assertAppProject,
  assertPluginProject: logger.assertPluginProject,
  constants: logger.constants$1,
  isApplicationProject: logger.isApplicationProject,
  isPluginProject: logger.isPluginProject,
  projectFactory: logger.projectFactory
});

var index$9 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AbortedError: logger.AbortedError,
  NPMCandidateNotFoundError: logger.NPMCandidateNotFoundError,
  UnexpectedError: logger.UnexpectedError,
  unknownToError: logger.unknownToError
});

var index$8 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemodFactory: logger.codemodFactory,
  constants: logger.constants$2
});

var index$7 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemodRepositoryFactory: logger.codemodRepositoryFactory,
  constants: logger.constants$3
});

var index$6 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  constants: logger.constants$4,
  upgraderFactory: logger.upgraderFactory
});

var index$5 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  requirementFactory: logger.requirementFactory
});

var index$4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  listCodemods: logger.listCodemods,
  runCodemods: logger.runCodemods,
  upgrade: logger.upgrade
});

var index$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  loggerFactory: logger.loggerFactory
});

const codemodReportFactory = (codemod, report)=>({
        codemod,
        report
    });
const reportFactory = (report)=>({
        ...report
    });

var index$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemodReportFactory: codemodReportFactory,
  reportFactory: reportFactory
});

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  code: index$c,
  json: index$b
});

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemod: index$8,
  codemodRepository: index$7,
  error: index$9,
  f: index$f,
  fileScanner: index$d,
  logger: index$3,
  project: index$a,
  report: index$2,
  requirement: index$5,
  runner: index$1,
  timer: index$g,
  upgrader: index$6,
  version: index$e
});

exports.modules = index;
exports.tasks = index$4;
//# sourceMappingURL=index.js.map
