{"version":3,"file":"cli.mjs","sources":["../src/cli/errors.ts","../src/cli/options.ts","../src/cli/commands/upgrade.ts","../src/cli/commands/codemods.ts","../src/cli/index.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport { AbortedError } from '../modules/error';\n\nexport const handleError = (err: unknown, isSilent: boolean) => {\n  // If the upgrade process has been aborted, exit silently\n  if (err instanceof AbortedError) {\n    process.exit(0);\n  }\n\n  if (!isSilent) {\n    console.error(\n      chalk.red(`[ERROR]\\t[${new Date().toISOString()}]`),\n      err instanceof Error ? err.message : err\n    );\n  }\n\n  process.exit(1);\n};\n","import { InvalidArgumentError, Option } from 'commander';\nimport { isValidStringifiedRange, rangeFactory } from '../modules/version';\n\nexport const projectPathOption = new Option(\n  '-p, --project-path <project-path>',\n  'Root path to the Strapi application or plugin'\n);\n\nexport const dryOption = new Option(\n  '-n, --dry',\n  'Simulate the upgrade without updating any files'\n).default(false);\n\nexport const debugOption = new Option('-d, --debug', 'Get more logs in debug mode').default(false);\n\nexport const silentOption = new Option('-s, --silent', \"Don't log anything\").default(false);\n\nexport const autoConfirmOption = new Option(\n  '-y, --yes',\n  'Automatically answer \"yes\" to any prompts that the CLI might print on the command line.'\n).default(false);\n\nexport const rangeOption = new Option(\n  '-r, --range <range>',\n  'Use a custom semver range for the codemods execution.'\n).argParser((range) => {\n  if (!isValidStringifiedRange(range)) {\n    throw new InvalidArgumentError('Expected a valid semver range');\n  }\n\n  return rangeFactory(range);\n});\n","import prompts from 'prompts';\nimport { InvalidArgumentError, Option } from 'commander';\n\nimport type { Command } from 'commander';\n\nimport { loggerFactory } from '../../modules/logger';\nimport { Version, isLiteralSemVer, isValidSemVer, semVerFactory } from '../../modules/version';\nimport { handleError } from '../errors';\nimport * as tasks from '../../tasks';\nimport {\n  autoConfirmOption,\n  debugOption,\n  dryOption,\n  projectPathOption,\n  silentOption,\n} from '../options';\n\nimport type { CLIUpgradeOptions, CLIUpgradeToOptions, UpgradeCommand } from '../types';\n\nexport const upgrade: UpgradeCommand = async (options) => {\n  try {\n    const { silent, debug, yes } = options;\n    const logger = loggerFactory({ silent, debug });\n\n    logger.warn(\n      \"Please make sure you've created a backup of your codebase and files before upgrading\"\n    );\n\n    const confirm = async (message: string) => {\n      if (yes) {\n        return true;\n      }\n\n      const { confirm } = await prompts({\n        name: 'confirm',\n        type: 'confirm',\n        message,\n      });\n\n      // If confirm is undefined (Ctrl + C), default to false\n      return confirm ?? false;\n    };\n\n    await tasks.upgrade({\n      logger,\n      confirm,\n      dry: options.dry,\n      cwd: options.projectPath,\n      target: options.target,\n      codemodsTarget: options.codemodsTarget,\n    });\n  } catch (err) {\n    handleError(err, options.silent);\n  }\n};\n\n/**\n * Registers upgrade related codemods.\n */\nexport const register = (program: Command) => {\n  const addReleaseUpgradeCommand = (releaseType: Version.ReleaseType, description: string) => {\n    program\n      .command(releaseType)\n      .description(description)\n      .addOption(projectPathOption)\n      .addOption(dryOption)\n      .addOption(debugOption)\n      .addOption(silentOption)\n      .addOption(autoConfirmOption)\n      .action(async (options: CLIUpgradeOptions) => {\n        return upgrade({ ...options, target: releaseType });\n      });\n  };\n\n  // upgrade latest\n  addReleaseUpgradeCommand(\n    Version.ReleaseType.Latest,\n    'Upgrade to the latest available version of Strapi'\n  );\n\n  // upgrade major\n  addReleaseUpgradeCommand(\n    Version.ReleaseType.Major,\n    'Upgrade to the next available major version of Strapi'\n  );\n\n  // upgrade minor\n  addReleaseUpgradeCommand(\n    Version.ReleaseType.Minor,\n    'Upgrade to the latest minor and patch version of Strapi for the current major'\n  );\n\n  // upgrade patch\n  addReleaseUpgradeCommand(\n    Version.ReleaseType.Patch,\n    'Upgrade to latest patch version of Strapi for the current major and minor'\n  );\n\n  // upgrade to <target>\n  program\n    .command('to <target>', { hidden: true })\n    .description('Upgrade to the specified version of Strapi')\n    .addOption(projectPathOption)\n    .addOption(dryOption)\n    .addOption(debugOption)\n    .addOption(silentOption)\n    .addOption(autoConfirmOption)\n    .addOption(\n      new Option(\n        '-c, --codemods-target <codemodsTarget>',\n        'Use a custom target for the codemods execution. Useful when targeting pre-releases'\n      ).argParser((codemodsTarget) => {\n        if (!isLiteralSemVer(codemodsTarget)) {\n          throw new InvalidArgumentError(\n            `Expected a version with the following format: \"<number>.<number>.<number>\"`\n          );\n        }\n\n        return semVerFactory(codemodsTarget);\n      })\n    )\n    .action(async (target: string, options: CLIUpgradeToOptions) => {\n      if (!isValidSemVer(target)) {\n        console.error(`Invalid target supplied, expected a valid semver but got \"${target}\"`);\n        process.exit(1);\n      }\n\n      return upgrade({ ...options, target: semVerFactory(target) });\n    });\n};\n","import prompts from 'prompts';\n\nimport type { Command } from 'commander';\nimport { loggerFactory } from '../../modules/logger';\nimport { Version } from '../../modules/version';\nimport { handleError } from '../errors';\nimport * as tasks from '../../tasks';\nimport { debugOption, dryOption, projectPathOption, rangeOption, silentOption } from '../options';\n\nimport type {\n  CLIListCodemodsOptions,\n  CLIRunCodemodsOptions,\n  ListCodemodsCommand,\n  RunCodemodsCommand,\n} from '../types';\nimport type { Codemod } from '../../modules/codemod';\n\nconst DEFAULT_TARGET = Version.ReleaseType.Major;\n\nexport const runCodemods: RunCodemodsCommand = async (options) => {\n  const { silent, debug } = options;\n  const logger = loggerFactory({ silent, debug });\n\n  logger.warn(\n    \"Please make sure you've created a backup of your codebase and files before running the codemods\"\n  );\n\n  const confirm = async (message: string) => {\n    const { confirm } = await prompts({\n      name: 'confirm',\n      type: 'confirm',\n      message,\n    });\n\n    // If confirm is undefined (Ctrl + C), default to false\n    return confirm ?? false;\n  };\n\n  const selectCodemods = async (codemods: Codemod.VersionedCollection[]) => {\n    const selectableCodemods = codemods\n      .map(({ version, codemods }) =>\n        codemods.map((codemod) => ({\n          title: `(${version}) ${codemod.format()}`,\n          value: codemod,\n          selected: true,\n        }))\n      )\n      .flat();\n\n    if (selectableCodemods.length === 0) {\n      logger.info('No codemods to run');\n      return [];\n    }\n\n    const { selectedCodemods }: { selectedCodemods: Codemod.Codemod[] } = await prompts({\n      type: 'autocompleteMultiselect',\n      name: 'selectedCodemods',\n      message: 'Choose the codemods you would like to run:',\n      choices: selectableCodemods,\n    });\n\n    if (!selectedCodemods || selectedCodemods.length === 0) {\n      logger.info('No codemods selected');\n      return [];\n    }\n\n    return selectedCodemods.map<Codemod.VersionedCollection>((codemod) => ({\n      version: codemod.version,\n      codemods: [codemod],\n    }));\n  };\n\n  return tasks\n    .runCodemods({\n      logger,\n      confirm,\n      selectCodemods,\n      dry: options.dry,\n      cwd: options.projectPath,\n      target: options.range ?? DEFAULT_TARGET,\n      uid: options.uid,\n    })\n    .catch((err) => handleError(err, options.silent));\n};\n\nexport const listCodemods: ListCodemodsCommand = async (options) => {\n  const { silent, debug } = options;\n  const logger = loggerFactory({ silent, debug });\n\n  return tasks\n    .listCodemods({\n      cwd: options.projectPath,\n      target: options.range ?? DEFAULT_TARGET,\n      logger,\n    })\n    .catch((err) => handleError(err, options.silent));\n};\n\n/**\n * Registers codemods related commands.\n */\nexport const register = (program: Command) => {\n  const codemodsCommand = program.command('codemods');\n\n  // upgrade codemods run [options] [uid]\n  codemodsCommand\n    .command('run [uid]')\n    .description(\n      `\nExecutes a set of codemods on the current project.\n\nIf the optional UID argument is provided, the command specifically runs the codemod associated with that UID.\nWithout the UID, the command produces a list of all available codemods for your project.\n\nBy default, when executed on a Strapi application project, it offers codemods matching the current major version of the app.\nWhen executed on a Strapi plugin project, it shows every codemods.\n`\n    )\n    .addOption(projectPathOption)\n    .addOption(dryOption)\n    .addOption(debugOption)\n    .addOption(silentOption)\n    .addOption(rangeOption)\n    .action(async (uid: string | undefined, options: CLIRunCodemodsOptions) => {\n      return runCodemods({ ...options, uid });\n    });\n\n  // upgrade codemods ls [options]\n  codemodsCommand\n    .command('ls')\n    .description(`List available codemods`)\n    .addOption(projectPathOption)\n    .addOption(debugOption)\n    .addOption(silentOption)\n    .addOption(rangeOption)\n    .action(async (options: CLIListCodemodsOptions) => {\n      return listCodemods(options);\n    });\n};\n","import os from 'os';\nimport chalk from 'chalk';\nimport { program } from 'commander';\n\nimport { register as registerUpgradeCommands } from './commands/upgrade';\nimport { register as registerCodemodsCommands } from './commands/codemods';\n\nimport { version as packageJSONVersion } from '../../package.json';\n\nregisterUpgradeCommands(program);\nregisterCodemodsCommands(program);\n\nprogram\n  .usage('<command> [options]')\n  .on('command:*', ([invalidCmd]) => {\n    console.error(\n      chalk.red(\n        `[ERROR] Invalid command: ${invalidCmd}.${os.EOL} See --help for a list of available commands.`\n      )\n    );\n\n    process.exit(1);\n  })\n  .helpOption('-h, --help', 'Print command line options')\n  .addHelpCommand('help [command]', 'Print options for a specific command')\n  .version(packageJSONVersion)\n  .parse(process.argv);\n"],"names":["handleError","err","isSilent","AbortedError","process","exit","console","error","chalk","red","Date","toISOString","Error","message","projectPathOption","Option","dryOption","default","debugOption","silentOption","autoConfirmOption","rangeOption","argParser","range","isValidStringifiedRange","InvalidArgumentError","rangeFactory","upgrade","options","silent","debug","yes","logger","loggerFactory","warn","confirm","prompts","name","type","tasks","dry","cwd","projectPath","target","codemodsTarget","register","program","addReleaseUpgradeCommand","releaseType","description","command","addOption","action","Version","Latest","Major","Minor","Patch","hidden","isLiteralSemVer","semVerFactory","isValidSemVer","DEFAULT_TARGET","runCodemods","selectCodemods","codemods","selectableCodemods","map","version","codemod","title","format","value","selected","flat","length","info","selectedCodemods","choices","uid","catch","listCodemods","codemodsCommand","registerUpgradeCommands","registerCodemodsCommands","usage","on","invalidCmd","os","EOL","helpOption","addHelpCommand","packageJSONVersion","parse","argv"],"mappings":"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"}