import { c as constants, t as timerFactory, a as codemodList, b as codemodUID, d as durationMs, h as highlight, p as path, e as projectDetails, f as projectType, r as reports, g as transform, u as upgradeStep, v as version, i as versionRange, j as types, k as isLiteralSemVer, l as isRangeInstance, m as isSemVerReleaseType, n as isSemverInstance, o as isValidSemVer, q as isValidStringifiedRange, s as rangeFactory, w as rangeFromReleaseType, x as rangeFromVersions, y as semVerFactory, z as fileScannerFactory, A as codeRunnerFactory, B as jsonRunnerFactory, C as assertAppProject, D as assertPluginProject, E as constants$1, F as isApplicationProject, G as isPluginProject, H as projectFactory, I as AbortedError, N as NPMCandidateNotFoundError, U as UnexpectedError, J as unknownToError, K as codemodFactory, L as constants$2, M as codemodRepositoryFactory, O as constants$3, P as constants$4, Q as upgraderFactory, R as requirementFactory, S as listCodemods, T as runCodemods, V as upgrade, W as loggerFactory } from './chunks/logger-np_r7rTc.mjs';
import 'semver';
import 'node:path';
import 'node:assert';
import 'chalk';
import '@strapi/utils';
import 'fs-extra';
import 'fast-glob';
import 'jscodeshift/src/Runner';
import 'lodash/fp';
import 'esbuild-register/dist/node';
import 'simple-git';
import 'cli-table3';

var index$g = /*#__PURE__*/Object.freeze({
  __proto__: null,
  constants: constants,
  timerFactory: timerFactory
});

var index$f = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemodList: codemodList,
  codemodUID: codemodUID,
  durationMs: durationMs,
  highlight: highlight,
  path: path,
  projectDetails: projectDetails,
  projectType: projectType,
  reports: reports,
  transform: transform,
  upgradeStep: upgradeStep,
  version: version,
  versionRange: versionRange
});

var index$e = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Version: types,
  isLiteralSemVer: isLiteralSemVer,
  isRangeInstance: isRangeInstance,
  isSemVerReleaseType: isSemVerReleaseType,
  isSemverInstance: isSemverInstance,
  isValidSemVer: isValidSemVer,
  isValidStringifiedRange: isValidStringifiedRange,
  rangeFactory: rangeFactory,
  rangeFromReleaseType: rangeFromReleaseType,
  rangeFromVersions: rangeFromVersions,
  semVerFactory: semVerFactory
});

var index$d = /*#__PURE__*/Object.freeze({
  __proto__: null,
  fileScannerFactory: fileScannerFactory
});

var index$c = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codeRunnerFactory: codeRunnerFactory
});

var index$b = /*#__PURE__*/Object.freeze({
  __proto__: null,
  jsonRunnerFactory: jsonRunnerFactory
});

var index$a = /*#__PURE__*/Object.freeze({
  __proto__: null,
  assertAppProject: assertAppProject,
  assertPluginProject: assertPluginProject,
  constants: constants$1,
  isApplicationProject: isApplicationProject,
  isPluginProject: isPluginProject,
  projectFactory: projectFactory
});

var index$9 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  AbortedError: AbortedError,
  NPMCandidateNotFoundError: NPMCandidateNotFoundError,
  UnexpectedError: UnexpectedError,
  unknownToError: unknownToError
});

var index$8 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemodFactory: codemodFactory,
  constants: constants$2
});

var index$7 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemodRepositoryFactory: codemodRepositoryFactory,
  constants: constants$3
});

var index$6 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  constants: constants$4,
  upgraderFactory: upgraderFactory
});

var index$5 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  requirementFactory: requirementFactory
});

var index$4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  listCodemods: listCodemods,
  runCodemods: runCodemods,
  upgrade: upgrade
});

var index$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  loggerFactory: loggerFactory
});

const codemodReportFactory = (codemod, report)=>({
        codemod,
        report
    });
const reportFactory = (report)=>({
        ...report
    });

var index$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemodReportFactory: codemodReportFactory,
  reportFactory: reportFactory
});

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  code: index$c,
  json: index$b
});

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  codemod: index$8,
  codemodRepository: index$7,
  error: index$9,
  f: index$f,
  fileScanner: index$d,
  logger: index$3,
  project: index$a,
  report: index$2,
  requirement: index$5,
  runner: index$1,
  timer: index$g,
  upgrader: index$6,
  version: index$e
});

export { index as modules, index$4 as tasks };
//# sourceMappingURL=index.mjs.map
