import require$$0$1 from "fs";
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
const name = "@_sh/strapi-plugin-ckeditor";
const version = "4.0.10";
const description = "Integrates CKEditor 5 into your Strapi project as a fully customizable custom field. (Unofficial integration)";
const keywords = [
  "strapi",
  "ckeditor",
  "ckeditor5",
  "ckeditor 5",
  "wysiwyg",
  "rich text",
  "editor"
];
const author = {
  name: "nshenderov"
};
const homepage = "https://market.strapi.io/plugins/@_sh-strapi-plugin-ckeditor";
const repository = {
  type: "git",
  url: "https://github.com/nshenderov/strapi-plugin-ckeditor.git"
};
const strapi$1 = {
  name: "ckeditor5",
  displayName: "CKEditor 5",
  description: "Integrates CKEditor 5 into your Strapi project as a fully customizable custom field. (Unofficial integration)",
  kind: "plugin"
};
const exports = {
  "./package.json": "./package.json",
  "./strapi-admin": {
    source: "./admin/src/index.js",
    "import": "./dist/admin/index.mjs",
    require: "./dist/admin/index.js",
    "default": "./dist/admin/index.js"
  },
  "./strapi-server": {
    source: "./server/src/index.js",
    "import": "./dist/server/index.mjs",
    require: "./dist/server/index.js",
    "default": "./dist/server/index.js"
  }
};
const files = [
  "dist",
  "./strapi-server.js"
];
const scripts = {
  build: "strapi-plugin build",
  watch: "strapi-plugin watch",
  "watch:link": "strapi-plugin watch:link",
  verify: "strapi-plugin verify",
  release: "release-it",
  "release:info": "release-it --changelog"
};
const dependencies = {
  ckeditor5: "^43.3.1",
  "@ckeditor/ckeditor5-react": "^9.3.1",
  "@strapi/design-system": "^2.0.0-rc.11",
  "prop-types": "^15.8.1",
  "sanitize-html": "^2.13.1"
};
const devDependencies = {
  "@strapi/strapi": "^5.0.0",
  "@strapi/sdk-plugin": "^5.2.6",
  prettier: "^3.3.3",
  react: "^18.3.1",
  "react-dom": "^18.3.1",
  "react-router-dom": "^6.26.2",
  "styled-components": "^6.1.13",
  "release-it": "^17.6.0",
  "@release-it/conventional-changelog": "^8.0.1"
};
const peerDependencies = {
  "@strapi/strapi": "^5.0.0",
  "@strapi/sdk-plugin": "^5.2.6",
  react: "^18.3.1",
  "react-dom": "^18.3.1",
  "react-router-dom": "^6.26.2",
  "styled-components": "^6.1.13"
};
const engines = {
  node: ">=18.0.0 <=20.x.x",
  npm: ">=6.0.0"
};
const license = "MIT";
const require$$0 = {
  name,
  version,
  description,
  "private": false,
  keywords,
  author,
  homepage,
  repository,
  strapi: strapi$1,
  exports,
  files,
  scripts,
  dependencies,
  devDependencies,
  peerDependencies,
  engines,
  license
};
const pluginPkg = require$$0;
var pluginId$2 = pluginPkg.strapi.name;
const pluginId$1 = pluginId$2;
var register$1 = ({ strapi: strapi2 }) => {
  strapi2.customFields.register({
    name: "CKEditor",
    plugin: pluginId$1,
    type: "richtext"
  });
};
const pluginId = pluginId$2;
var config$3 = {
  getConfig: async (ctx) => {
    const { responsiveDimensions = false } = await strapi.plugin("upload").service("upload").getSettings();
    const config2 = await strapi.plugin(pluginId).service("config").getConfig() + `
globalThis.SH_CKE_UPLOAD_ADAPTER_IS_RESPONSIVE = ${responsiveDimensions}`;
    ctx.type = "application/javascript";
    ctx.send(config2);
  }
};
const config$2 = config$3;
var controllers$1 = {
  config: config$2
};
var routes$1 = {
  config: {
    type: "admin",
    routes: [
      {
        method: "GET",
        path: "/config/ckeditor",
        handler: "config.getConfig",
        config: {
          auth: false
        }
      }
    ]
  }
};
const fs = require$$0$1;
var config$1 = ({ strapi: strapi2 }) => {
  const readConfigFile = () => {
    const appDir = process.cwd();
    const isTSProject = fs.existsSync(`${appDir}/dist`);
    const envName = process.env.NODE_ENV;
    const cfgDir = isTSProject ? `${appDir}/dist/config` : `${appDir}/config`;
    const cfgFileName = "ckeditor.js";
    const envFilePath = `${cfgDir}/env/${envName}/${cfgFileName}`;
    const baseFilePath = `${cfgDir}/${cfgFileName}`;
    if (fs.existsSync(envFilePath)) {
      return fs.readFileSync(envFilePath, "utf8");
    } else if (fs.existsSync(baseFilePath)) {
      return fs.readFileSync(baseFilePath, "utf8");
    } else {
      return null;
    }
  };
  const trimConfig = (str) => {
    for (const func of ["const CKEConfig", "function CKEConfig"]) {
      const idx = str.indexOf(func);
      if (idx >= 0) {
        return str.substring(idx) + `
globalThis.SH_CKE_CONFIG = CKEConfig()`;
      }
    }
  };
  return {
    getConfig() {
      const configFileContent = readConfigFile();
      const config2 = configFileContent && trimConfig(configFileContent);
      return config2 || `globalThis.SH_CKE_CONFIG = null`;
    }
  };
};
const config = config$1;
var services$1 = {
  config
};
const register = register$1;
const controllers = controllers$1;
const routes = routes$1;
const services = services$1;
var src = {
  register,
  controllers,
  routes,
  services
};
const index = /* @__PURE__ */ getDefaultExportFromCjs(src);
export {
  index as default
};
//# sourceMappingURL=index.mjs.map
